package com.mesqr.android.db;

import com.mesqr.android.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table MSQ.
 */
public class Msq {

    private Long id;
    private String Message;
    private String FriendlyPosition;
    private String UserName;
    private double Latitude;
    private double Longitude;
    private double Accuracy;
    private Double Altitude;
    private String RowGuid;
    /** Not-null value. */
    private java.util.Date Entered;
    private Long TableId;

    /** Used to resolve relations */
    protected transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MsqDao myDao;

    private Table table;
    private Long table__resolvedKey;


    public Msq() {
    }

    public Msq(Long id) {
        this.id = id;
    }

    public Msq(Long id, String Message, String FriendlyPosition, String UserName, double Latitude, double Longitude, double Accuracy, Double Altitude, String RowGuid, java.util.Date Entered, Long TableId) {
        this.id = id;
        this.Message = Message;
        this.FriendlyPosition = FriendlyPosition;
        this.UserName = UserName;
        this.Latitude = Latitude;
        this.Longitude = Longitude;
        this.Accuracy = Accuracy;
        this.Altitude = Altitude;
        this.RowGuid = RowGuid;
        this.Entered = Entered;
        this.TableId = TableId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMsqDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getMessage() {
        return Message;
    }

    public void setMessage(String Message) {
        this.Message = Message;
    }

    public String getFriendlyPosition() {
        return FriendlyPosition;
    }

    public void setFriendlyPosition(String FriendlyPosition) {
        this.FriendlyPosition = FriendlyPosition;
    }

    public String getUserName() {
        return UserName;
    }

    public void setUserName(String UserName) {
        this.UserName = UserName;
    }

    public double getLatitude() {
        return Latitude;
    }

    public void setLatitude(double Latitude) {
        this.Latitude = Latitude;
    }

    public double getLongitude() {
        return Longitude;
    }

    public void setLongitude(double Longitude) {
        this.Longitude = Longitude;
    }

    public double getAccuracy() {
        return Accuracy;
    }

    public void setAccuracy(double Accuracy) {
        this.Accuracy = Accuracy;
    }

    public Double getAltitude() {
        return Altitude;
    }

    public void setAltitude(Double Altitude) {
        this.Altitude = Altitude;
    }

    public String getRowGuid() {
        return RowGuid;
    }

    public void setRowGuid(String RowGuid) {
        this.RowGuid = RowGuid;
    }

    /** Not-null value. */
    public java.util.Date getEntered() {
        return Entered;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEntered(java.util.Date Entered) {
        this.Entered = Entered;
    }

    public Long getTableId() {
        return TableId;
    }

    public void setTableId(Long TableId) {
        this.TableId = TableId;
    }

    /** To-one relationship, resolved on first access. */
    public Table getTable() {
        if (table__resolvedKey == null || !table__resolvedKey.equals(TableId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableDao targetDao = daoSession.getTableDao();
            table = targetDao.load(TableId);
            table__resolvedKey = TableId;
        }
        return table;
    }

    public void setTable(Table table) {
        this.table = table;
        TableId = table == null ? null : table.getId();
        table__resolvedKey = TableId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
