package com.mesqr.android.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;

import com.mesqr.android.db.Msq;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MSQ.
*/
public class MsqDao extends AbstractDao<Msq, Long> {

    public static final String TABLENAME = "MSQ";

    /**
     * Properties of entity Msq.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Message = new Property(1, String.class, "Message", false, "MESSAGE");
        public final static Property FriendlyPosition = new Property(2, String.class, "FriendlyPosition", false, "FRIENDLY_POSITION");
        public final static Property UserName = new Property(3, String.class, "UserName", false, "USER_NAME");
        public final static Property Latitude = new Property(4, double.class, "Latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(5, double.class, "Longitude", false, "LONGITUDE");
        public final static Property Accuracy = new Property(6, double.class, "Accuracy", false, "ACCURACY");
        public final static Property Altitude = new Property(7, Double.class, "Altitude", false, "ALTITUDE");
        public final static Property RowGuid = new Property(8, String.class, "RowGuid", false, "ROW_GUID");
        public final static Property Entered = new Property(9, java.util.Date.class, "Entered", false, "ENTERED");
        public final static Property TableId = new Property(10, Long.class, "TableId", false, "TABLE_ID");
    };

    private DaoSession daoSession;


    public MsqDao(DaoConfig config) {
        super(config);
    }
    
    public MsqDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MSQ' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MESSAGE' TEXT," + // 1: Message
                "'FRIENDLY_POSITION' TEXT," + // 2: FriendlyPosition
                "'USER_NAME' TEXT," + // 3: UserName
                "'LATITUDE' REAL NOT NULL ," + // 4: Latitude
                "'LONGITUDE' REAL NOT NULL ," + // 5: Longitude
                "'ACCURACY' REAL NOT NULL ," + // 6: Accuracy
                "'ALTITUDE' REAL," + // 7: Altitude
                "'ROW_GUID' TEXT," + // 8: RowGuid
                "'ENTERED' INTEGER NOT NULL ," + // 9: Entered
                "'TABLE_ID' INTEGER);"); // 10: TableId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MSQ'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Msq entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Message = entity.getMessage();
        if (Message != null) {
            stmt.bindString(2, Message);
        }
 
        String FriendlyPosition = entity.getFriendlyPosition();
        if (FriendlyPosition != null) {
            stmt.bindString(3, FriendlyPosition);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(4, UserName);
        }
        stmt.bindDouble(5, entity.getLatitude());
        stmt.bindDouble(6, entity.getLongitude());
        stmt.bindDouble(7, entity.getAccuracy());
 
        Double Altitude = entity.getAltitude();
        if (Altitude != null) {
            stmt.bindDouble(8, Altitude);
        }
 
        String RowGuid = entity.getRowGuid();
        if (RowGuid != null) {
            stmt.bindString(9, RowGuid);
        }
        stmt.bindLong(10, entity.getEntered().getTime());
 
        Long TableId = entity.getTableId();
        if (TableId != null) {
            stmt.bindLong(11, TableId);
        }
    }

    @Override
    protected void attachEntity(Msq entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Msq readEntity(Cursor cursor, int offset) {
        Msq entity = new Msq( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Message
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FriendlyPosition
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // UserName
            cursor.getDouble(offset + 4), // Latitude
            cursor.getDouble(offset + 5), // Longitude
            cursor.getDouble(offset + 6), // Accuracy
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // Altitude
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // RowGuid
            new java.util.Date(cursor.getLong(offset + 9)), // Entered
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // TableId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Msq entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFriendlyPosition(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLatitude(cursor.getDouble(offset + 4));
        entity.setLongitude(cursor.getDouble(offset + 5));
        entity.setAccuracy(cursor.getDouble(offset + 6));
        entity.setAltitude(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setRowGuid(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEntered(new java.util.Date(cursor.getLong(offset + 9)));
        entity.setTableId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Msq entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Msq entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTableDao().getAllColumns());
            builder.append(" FROM MSQ T");
            builder.append(" LEFT JOIN TABLE T0 ON T.'TABLE_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Msq loadCurrentDeep(Cursor cursor, boolean lock) {
        Msq entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Table table = loadCurrentOther(daoSession.getTableDao(), cursor, offset);
        entity.setTable(table);

        return entity;    
    }

    public Msq loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Msq> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Msq> list = new ArrayList<Msq>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Msq> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Msq> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
